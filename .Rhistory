infect_count <- as.integer(ProjectSimulations(sim_param)[,i_rep])
as.integer(sapply(infect_count,
function (ic) rbinom(n=1, size=ic, prob=overall_params$report_prob)))
}
)
names(project_res_list) <- 1:overall_params$n_replicates
project_res <- bind_cols(project_res_list) %>% as_tibble()
project_res$interesting <- interest
project_res$id_scenario <- ids
project_res$sim_method <- sm
project_res$id_start_comb <- ist
project_res$sim_step <- 1:nrow(project_res)
project_res <- project_res %>%
as_tibble() %>%
pivot_longer(cols=-c(interesting, id_scenario, sim_method, id_start_comb, sim_step),
names_to='replicate', values_to='count') %>%
mutate(
sim_run=as.integer(replicate)+run_offset,
replicate=as.integer(replicate),
class=NA) %>%
dplyr::select(interesting, id_scenario, sim_method, id_start_comb, sim_run, replicate,
sim_step, count, class) %>%
arrange(sim_run, sim_step)
run_offset <- run_offset + overall_params$n_replicates
# Classes of observations which will serve as ground truth:
# - if there is only one period, all observations are "normal"
# - all observations in the period before last are "normal"
# - if the trend stays the same, then all observations of the last period are "normal"
# - if the trend between period before last and last changes and increases
#   (to "upward" or from "downward" to "constant"), then the observations of
#   the last period are "increase"
# - respectively, if the trend changes to "downward" or from "upward" to "constant",
#   then the observations of the last period are "decrease"
if (length(trends)==1) {
project_res$class <- 'normal'
} else {
strength_t1 <- overall_params$period_trends[[trends[length(trends)-1]]]
strength_t2 <- overall_params$period_trends[[trends[length(trends)]]]
if (strength_t1 == strength_t2) {
project_res$class <- 'normal'
} else if (strength_t1 < strength_t2) {
project_res <- project_res %>%
mutate(class=ifelse(sim_step %in% 1:(tail(change_at, 1)-1), 'normal', 'increase'))
} else if (strength_t1 > strength_t2) {
project_res <- project_res %>%
mutate(class=ifelse(sim_step %in% 1:(tail(change_at, 1)-1), 'normal', 'decrease'))
} else {
stop('Something\'s wrong with the trends: "', paste0(trends, collapse='", "'), '".')
}
}
if (!all(project_res$class %in% overall_params$classes)) {
stop('Some the attributed classes "', paste(sort(unique(project_res$class)), collapse=", "),
'" are not in the expected classes "', paste(overall_params$classes, collapse=", "), '".')
}
simulations <- simulations %>% bind_rows(project_res)
}
} else {
stop('Don\'t know simulation method "', sm, '"')
}
}
# t2 <- Sys.time()
# print('Time elapsed for generating simulations:')
# print(t2-t1)
saveRDS(simulations, here(data_relative_path, 'simulations.rds'))
# In the flare-up scenario, count how many time series actually go up in the
# second period, according to 3 criteria: mean increases, median increases, or
# the 25th percentile of the second period is larger or equal to the 75th of
# the first.
sim_count_diff_flareup <- simulations %>%
filter(interesting == "flareup") %>%
dplyr::select(sim_run, count, class) %>%
group_by(sim_run, class) %>%
summarize(
mean_count = mean(count),
med_count = median(count),
q25_count = quantile(count, probs = 0.25),
q75_count = quantile(count, probs = 0.75)
) %>%
mutate(ref_count = case_when(
class == "increase" ~ q25_count,
class == "normal" ~ q75_count,
TRUE ~ as.numeric(NA)))
prop_flareup_increase <- c()
for (countq in c("mean_count", "med_count", "ref_count")) {
prop_flareup_increase_df <- sim_count_diff_flareup %>%
dplyr::select(sim_run, class, all_of(countq)) %>%
pivot_wider(names_from = class, values_from = all_of(countq)) %>%
mutate(actual_increase = increase >= normal)
prop_flareup_increase <- c(
prop_flareup_increase,
sum(prop_flareup_increase_df$actual_increase) /
nrow(prop_flareup_increase_df)
)
}
overview_relative_path <- paste0(img_relative_path, '/sim-project/overview')
dir.create(overview_relative_path, showWarnings = FALSE, recursive = TRUE)
prop_flareup_increase_file <- file(here(overview_relative_path,
"prop_flareup_increase.txt"))
open(prop_flareup_increase_file, open = "w")
cat("In the flare-up scenario, proprtion of time-series that are actually",
"going up in the second period, according to three criteria: mean increases,",
"median increases, or the 25th percentile of the second period is larger or",
"equal to the 75th of the first.", "\n",
"Rt(normal) = ", project_params$R_means[[
overall_params$interesting_scenarios$flareup$trends[1]
]], "\n",
"Rt(increase) = ", project_params$R_means[[
overall_params$interesting_scenarios$flareup$trends[2]
]], "\n",
"initial incidence = ", project_params$init_incidence[[
overall_params$interesting_scenarios$flareup$initial_level
]], "\n\n",
"mean: ", signif(prop_flareup_increase[1], digits = 4), "\n",
"median: ", signif(prop_flareup_increase[2], digits = 4), "\n",
"percentiles: ", signif(prop_flareup_increase[3], digits = 4), "\n",
sep = "",
file = prop_flareup_increase_file)
close(prop_flareup_increase_file)
} else {
simulations <- readRDS(here(data_relative_path, 'simulations.rds'))
}
View(simulations)
ClassifyCountCI <- function(cnt, ci) {
# Classify observed counts `cnt` as "decrease", "normal", "increase" if they are below, within or
# above the confidence interval `ci`.
classification <- c()
for (i in 1:length(cnt)) {
if (is.na(ci[['lowerbound']][i]) | is.na(ci[['upperbound']][i])) {
clas <- NA
} else if (cnt[i] < ci[['lowerbound']][i]) {
clas <- 'decrease'
} else if (cnt[i] > ci[['upperbound']][i]) {
clas <- 'increase'
} else {
clas <- 'normal'
}
classification <- c(classification, clas)
}
return(classification)
}
# All combinations of simulations and detection parameters leading to as many detection runs.
detection_comb <- simulations %>%
dplyr::select(interesting, id_scenario, sim_method, id_start_comb, sim_run) %>%
unique() %>%
mutate(id_detect_comb=row_number()) %>%
dplyr::select(id_detect_comb, everything())
detectmeth_alpha_comb <- expand.grid(
id_detect_comb = detection_comb$id_detect_comb,
detect_method = overall_params$detect_algos,
alpha = overall_params$detect_alpha,
stringsAsFactors=F
) %>% as_tibble()
detection_comb <- detection_comb %>%
full_join(detectmeth_alpha_comb, by='id_detect_comb') %>%
mutate(id_detect_comb=row_number())
if (compute_detections) {
detections <- NULL
asmodee_k <- NULL
scenario_seen <- c()
detect_examples <- list()
t3 <- Sys.time()
for (idc in detection_comb$id_detect_comb) {
## DEBUG
idc <- detection_comb %>% filter(interesting=='relapse' & sim_method=='project' & sim_run==1 & detect_method=='ASMODEE_optimal' & alpha==0.05) %>% pull(id_detect_comb)
idc <- detection_comb %>% filter(interesting=='relapse' & sim_method=='project' & sim_run==1 & detect_method=='NegBin' & alpha==0.05) %>% pull(id_detect_comb)
idc <- detection_comb %>% filter(interesting=='lockdown' & sim_method=='project' & sim_run==1 & detect_method=='modified_Farrington' & alpha==0.05) %>% pull(id_detect_comb)
if (round(100000*idc/nrow(detection_comb))/1000 == round(100*idc/nrow(detection_comb))) {
cat('detect: ', idc, ' / ', round(100*idc/nrow(detection_comb)), '% // ', sep='')
print(Sys.time()-t3)
}
ids <- detection_comb %>% filter(id_detect_comb==idc) %>% pull(id_scenario)
sm <- detection_comb %>% filter(id_detect_comb==idc) %>% pull(sim_method)
sr <- detection_comb %>% filter(id_detect_comb==idc) %>% pull(sim_run)
dm <- detection_comb %>% filter(id_detect_comb==idc) %>% pull(detect_method)
al <- detection_comb %>% filter(id_detect_comb==idc) %>% pull(alpha)
if (!ids %in% scenario_seen) {
scenario_seen <- c(scenario_seen, ids)
detect_examples[[ids]] <- list()
detect_examples[[ids]][[dm]] <- list()
}
count_timeseries <- simulations %>%
filter(id_scenario==ids & sim_run==sr) %>%
dplyr::select(sim_step, count)
if(grepl('ASMODEE', dm)) {
if (grepl('manual', dm)) {
asmodee_res <- asmodee(
count_timeseries %>% rename(date=sim_step),
models = asmodee_params$models,
alpha = al,
fixed_k = asmodee_params$k_manual,
method = asmodee_params$method,
uncertain = FALSE,
simulate_pi = TRUE
)
} else if (grepl('optimal', dm)) {
asmodee_res <- asmodee(
count_timeseries %>% rename(date=sim_step),
models = asmodee_params$models,
alpha = al,
max_k = asmodee_params$k_optimal_max,
method = asmodee_params$method,
uncertain = FALSE,
simulate_pi = TRUE
)
} else {
stop('Wrong ASMODEE method "', dm,
'". It should be either with manual k ("ASMODEE_manual") ',
'or optimal k ("ASMODEE_optimal").')
}
asmodee_k <- asmodee_k %>%
bind_rows(tibble(id_detect_comb=idc, detect_method=dm, alpha=al, k=asmodee_res$k))
if (sr==1 & sm=='project') {
detect_examples[[ids]][[dm]][[as.character(al)]] <- asmodee_res
}
detection_res <- asmodee_res$results %>%
as_tibble() %>%
dplyr::select(date, classification) %>%
rename(sim_step = date)
} else if (dm=='NegBin') {
negbin_trainset <- count_timeseries %>%
filter(sim_step < overall_params$n_sim_steps - overall_params$d_observation_period + 1) %>%
dplyr::select(sim_step, count)
negbin_model <- glm.nb(count~1, link='log', data=negbin_trainset)
if (al==0) {
negbin_ci <- c(0,Inf)
} else {
nb_size <- negbin_model$theta
nb_mu <- exp(negbin_model$coefficients[['(Intercept)']])
negbin_ci <- list(
lowerbound = rep(qnbinom(al/2, size=nb_size, mu=nb_mu), overall_params$n_sim_steps),
upperbound = rep(qnbinom(1-al/2, size=nb_size, mu=nb_mu), overall_params$n_sim_steps)
)
}
detection_res <- count_timeseries %>%
mutate(classification = ClassifyCountCI(count, negbin_ci)) %>%
dplyr::select(sim_step, classification)
if (sr==1 & sm=='project') {
negbin_res <- count_timeseries %>%
full_join(detection_res, by='sim_step') %>%
mutate(ci_lb=negbin_ci[['lowerbound']], ci_ub=negbin_ci[['upperbound']])
detect_examples[[ids]][[dm]][[as.character(al)]] <- negbin_res
}
} else if (dm=='modified_Farrington') {
sts <- sts(count_timeseries$count, frequency=7)
ff_out <- farringtonFlexible(sts, control=append(list(alpha=al/2), ff_control))
ff_size <- ff_out@control$mu0Vector/(ff_out@control$phiVector-1)
ff_mu <- ff_out@control$mu0Vector
ff_ci <- list(
lowerbound = c(
rep(NA, overall_params$n_sim_steps-length(ff_out@epoch)),
qnbinom(al/2, size=ff_size, mu=ff_mu)
),
upperbound = c(
rep(NA, overall_params$n_sim_steps-length(ff_out@epoch)),
qnbinom(1-al/2, size=ff_size, mu=ff_mu)
)
)
detection_res <- count_timeseries %>%
mutate(classification = ClassifyCountCI(count, ff_ci)) %>%
dplyr::select(sim_step, classification)
if (sr==1 & sm=='project') {
ff_res <- count_timeseries %>%
full_join(detection_res, by='sim_step') %>%
mutate(ci_lb=ff_ci[['lowerbound']], ci_ub=ff_ci[['upperbound']])
detect_examples[[ids]][[dm]][[as.character(al)]] <- ff_res
}
} else {
stop('Don\'t know detection algorithm "', dm, '".')
}
detection_res <- detection_res %>%
mutate(classification = as.character(classification)) %>%
filter(sim_step >= overall_params$n_sim_steps - overall_params$d_observation_period + 1) %>%
mutate(id_detect_comb=idc, id_scenario=ids, sim_method=sm, sim_run=sr,
detect_method=dm, alpha=al) %>%
left_join(simulations, by=c('id_scenario', 'sim_method', 'sim_run', 'sim_step')) %>%
dplyr::select(id_detect_comb, interesting, id_scenario, sim_method, sim_run, detect_method, alpha,
sim_step, count, classification, class)
detections <- detections %>% bind_rows(detection_res)
}
t4 <- Sys.time()
print('Time elapsed for applying detection algorithms:')
print(t4-t3)
saveRDS(asmodee_k, here(data_relative_path, 'asmodee_k.rds'))
saveRDS(detections, here(data_relative_path, 'detections.rds'))
saveRDS(detect_examples, here(data_relative_path, 'detect_examples.rds'))
} else {
asmodee_k <- readRDS(here(data_relative_path, 'asmodee_k.rds'))
detections <- readRDS(here(data_relative_path, 'detections.rds'))
detect_examples <- readRDS(here(data_relative_path, 'detect_examples.rds'))
}
require(ggplot2)
require(gridExtra)
require(RColorBrewer)
library(incidence2)
library(trendbreaker) # for ASMODEE
library(dplyr)        # for data manipulation
library(future)
ftregion<-read.csv("ftregion.txt",sep=";",header=T)
#ftregion8=ftregion %>% select(fch_confirmado,txt_nombreregion,cant_uci,cant_poblacion)
names(ftregion)
ftregion<-read.csv("ftregion.txt",sep=";",header=T)
names(ftregion)
ftregion8=ftregion %>% select(fch_confirmado,txt_nombreregion,cant_casosconfirmadosdiario,cant_poblacion,porc_positividad,cant_uci,cant_fallecidos)
ftregion8$cant_casosconfirmadosdiario<-((ftregion8$cant_casosconfirmadosdiario)/(ftregion8$cant_poblacion)*100000)
#Incidencia
d=as.numeric(ftregion8$cant_casosconfirmadosdiario)
ftregion8$cant_casosconfirmadosdiario=round(d,2)
#Positividad
positivo=(ftregion8$porc_positividad)*100
ftregion8$porc_positividad=round(positivo,2)
ftregion8$fch_confirmado<-as.Date(ftregion8$fch_confirmado)
fecha=as.Date("2020-03-03")
covid19_nhs=ftregion8 %>%
mutate(forma = fch_confirmado-fecha)%>%
mutate(forma2 = as.character(fch_confirmado, format="%A"))
View(covid19_nhs)
ftregion<-read.csv("ftregion.txt",sep=";",header=T)
fechas=names(table(ftregion$fch_confirmado))
l1=length(fechas)#218
l1
ftregion2=ftregion[which(ftregion$fch_confirmado==fechas[l1]),]
ftregion2
fechas[l1]
fechas[l1-42])
fechas[l1-42]
fechas[l1]
fechas[l1-42]
ftregion<-read.csv("ftregion.txt",sep=";",header=T)
fechas=names(table(ftregion$fch_confirmado))
l1=length(fechas)#218
fechas[l1]
fechas[l1-42]
names(ftregion)
ftregion8=ftregion %>% select(fch_confirmado,txt_nombreregion,cant_casosconfirmadosdiario,cant_poblacion,porc_positividad,cant_uci,cant_fallecidos)
ftregion8$cant_casosconfirmadosdiario<-((ftregion8$cant_casosconfirmadosdiario)/(ftregion8$cant_poblacion)*100000)
#Incidencia
d=as.numeric(ftregion8$cant_casosconfirmadosdiario)
ftregion8$cant_casosconfirmadosdiario=round(d,2)
#Positividad
positivo=(ftregion8$porc_positividad)*100
ftregion8$porc_positividad=round(positivo,2)
ftregion8$fch_confirmado<-as.Date(ftregion8$fch_confirmado)
fecha=as.Date("2020-03-03")
covid19_nhs=ftregion8 %>%
mutate(forma = fch_confirmado-fecha)%>%
mutate(forma2 = as.character(fch_confirmado, format="%A"))
covid19_nhs$forma=as.numeric(covid19_nhs$forma)
nombres=c("fecha","nhs_region","Incidencia","cant_pobla","Positividad","UCI","Mortalidad","day","weekday")
colnames(covid19_nhs)<-(nombres)
covid19_nhs$Incidencia=as.numeric(covid19_nhs$Incidencia)
covid19_nhs$Positividad=as.numeric(covid19_nhs$Positividad)
covid19_nhs$Mortalidad=as.numeric(covid19_nhs$Mortalidad)
covid19_nhs$UCI=as.numeric(covid19_nhs$UCI)
nombres=c("Tarapaca","Antofagasta","Atacama","Coquimbo","Valparaiso","Ohiggins","Maule","Bio-Bio","Araucania","Los Lagos","Aysen","Magallanes","Metropolitana","Los Rios","Arica","Nuble")
View(covid19_nhs)
covid19_nhs=covid19_nhs[2:17,]
View(covid19_nhs)
ftregion<-read.csv("ftregion.txt",sep=";",header=T)
fechas=names(table(ftregion$fch_confirmado))
l1=length(fechas)#218
names(ftregion)
ftregion8=ftregion %>% select(fch_confirmado,txt_nombreregion,cant_casosconfirmadosdiario,cant_poblacion,porc_positividad,cant_uci,cant_fallecidos)
ftregion8$cant_casosconfirmadosdiario<-((ftregion8$cant_casosconfirmadosdiario)/(ftregion8$cant_poblacion)*100000)
#Incidencia
d=as.numeric(ftregion8$cant_casosconfirmadosdiario)
ftregion8$cant_casosconfirmadosdiario=round(d,2)
#Positividad
positivo=(ftregion8$porc_positividad)*100
ftregion8$porc_positividad=round(positivo,2)
ftregion8$fch_confirmado<-as.Date(ftregion8$fch_confirmado)
fecha=as.Date("2020-03-03")
covid19_nhs=ftregion8 %>%
mutate(forma = fch_confirmado-fecha)%>%
mutate(forma2 = as.character(fch_confirmado, format="%A"))
covid19_nhs$forma=as.numeric(covid19_nhs$forma)
nombres=c("fecha","nhs_region","Incidencia","cant_pobla","Positividad","UCI","Mortalidad","day","weekday")
colnames(covid19_nhs)<-(nombres)
covid19_nhs$Incidencia=as.numeric(covid19_nhs$Incidencia)
covid19_nhs$Positividad=as.numeric(covid19_nhs$Positividad)
covid19_nhs$Mortalidad=as.numeric(covid19_nhs$Mortalidad)
covid19_nhs$UCI=as.numeric(covid19_nhs$UCI)
nhs_pathways_covid19<-covid19_nhs
t=nhs_pathways_covid19%>%
arrange(nhs_region)
nhs_pathways_covid19$fecha=as.Date(nhs_pathways_covid19$fecha)
nhs_pathways_covid19<-filter(nhs_pathways_covid19, #nhs_region=='00. Nacional') #nhs_region=='17. Norte Grande' |nhs_region=='18. Norte Chico' | nhs_region=='19. Zona Central' |nhs_region=='20. Zona Sur'| nhs_region=='21. Zona Austral'|nhs_region=='22. Regions Sin Metropolitana')
#                         nhs_region=='16. Región de Magallanes y Antártica Chilena')
#nhs_pathways_covid19<-filter(nhs_pathways_covid19, id_region=='1'|id_region=='2'|id_region=='3'|id_region=='4'|id_region=='5'|id_region=='6'|id_region=='7'|id_region=='8'|id_region=='9'|id_region=='10'|id_region=='11'|id_region=='12'|id_region=='13'|id_region=='14'|id_region=='15'|id_region=='16')
nhs_region=='01. Región de Arica y Parinacota'| nhs_region=='02. Región de Tarapacá'| nhs_region=='03. Región de Antofagasta' | nhs_region=='04. Región de Atacama' | nhs_region=='05. Región de Coquimbo' | nhs_region=='06. Región de Valparaíso' | nhs_region=='07. Región Metropolitana de Santiago'  | nhs_region=="08. Región del Libertador Bernardo O'Higgins"|nhs_region=='09. Región del Maule' |
nhs_region=='10. Región del Ñuble'| nhs_region=='11. Región del Bío-Bío'| nhs_region=='12. Región de La Araucanía' | nhs_region=='13. Región de Los Ríos' | nhs_region=='14. Región de Los Lagos' | nhs_region=='15. Región de Aysén del General Ibañez del Campo' | nhs_region=='16. Región de Magallanes y Antártica Chilena'  )
first_date <-fechas[l1-42]
last_date<-fechas[l1]
pathways_recent <- nhs_pathways_covid19 %>%
filter(fecha >= first_date)%>%
filter(fecha <= last_date)
lookup <- select(pathways_recent, fecha, day, weekday) %>%  distinct()
nhs_pathways_covid19$fecha<-as.Date(nhs_pathways_covid19$fecha)
dat <-
pathways_recent %>%
incidence(date_index = fecha, groups = nhs_region, count = Incidencia) %>%
left_join(lookup, by = c("date_index" = "fecha"))
models <- list(
regression = lm_model(count ~ day),
poisson_constant = glm_model(count ~ 1, family = "poisson"),
negbin_time = glm_nb_model(count ~ day),
negbin_time_weekday = glm_nb_model(count ~ day + weekday)
)
res <- asmodee(dat, models, method = evaluate_aic, alpha=0.05, k = 7)
plot(res)
p<-plot(res)
require(ggplot2)
require(gridExtra)
require(RColorBrewer)
library(incidence2)
library(trendbreaker) # for ASMODEE
library(dplyr)        # for data manipulation
library(future)
ftregion<-read.csv("ftregion.txt",sep=";",header=T)
fechas=names(table(ftregion$fch_confirmado))
l1=length(fechas)#218
names(ftregion)
ftregion8=ftregion %>% select(fch_confirmado,txt_nombreregion,cant_casosconfirmadosdiario,cant_poblacion,porc_positividad,cant_uci,cant_fallecidos)
ftregion8$cant_casosconfirmadosdiario<-((ftregion8$cant_casosconfirmadosdiario)/(ftregion8$cant_poblacion)*100000)
#Incidencia
d=as.numeric(ftregion8$cant_casosconfirmadosdiario)
ftregion8$cant_casosconfirmadosdiario=round(d,2)
#Positividad
positivo=(ftregion8$porc_positividad)*100
ftregion8$porc_positividad=round(positivo,2)
ftregion8$fch_confirmado<-as.Date(ftregion8$fch_confirmado)
fecha=as.Date("2020-03-03")
covid19_nhs=ftregion8 %>%
mutate(forma = fch_confirmado-fecha)%>%
mutate(forma2 = as.character(fch_confirmado, format="%A"))
covid19_nhs$forma=as.numeric(covid19_nhs$forma)
nombres=c("fecha","nhs_region","Incidencia","cant_pobla","Positividad","UCI","Mortalidad","day","weekday")
colnames(covid19_nhs)<-(nombres)
covid19_nhs$Incidencia=as.numeric(covid19_nhs$Incidencia)
covid19_nhs$Positividad=as.numeric(covid19_nhs$Positividad)
covid19_nhs$Mortalidad=as.numeric(covid19_nhs$Mortalidad)
covid19_nhs$UCI=as.numeric(covid19_nhs$UCI)
nhs_pathways_covid19<-covid19_nhs
t=nhs_pathways_covid19%>%
arrange(nhs_region)
nhs_pathways_covid19$fecha=as.Date(nhs_pathways_covid19$fecha)
nhs_pathways_covid19<-filter(nhs_pathways_covid19, #nhs_region=='00. Nacional') #nhs_region=='17. Norte Grande' |nhs_region=='18. Norte Chico' | nhs_region=='19. Zona Central' |nhs_region=='20. Zona Sur'| nhs_region=='21. Zona Austral'|nhs_region=='22. Regions Sin Metropolitana')
#                         nhs_region=='16. Región de Magallanes y Antártica Chilena')
#nhs_pathways_covid19<-filter(nhs_pathways_covid19, id_region=='1'|id_region=='2'|id_region=='3'|id_region=='4'|id_region=='5'|id_region=='6'|id_region=='7'|id_region=='8'|id_region=='9'|id_region=='10'|id_region=='11'|id_region=='12'|id_region=='13'|id_region=='14'|id_region=='15'|id_region=='16')
nhs_region=='01. Región de Arica y Parinacota'| nhs_region=='02. Región de Tarapacá'| nhs_region=='03. Región de Antofagasta' | nhs_region=='04. Región de Atacama' | nhs_region=='05. Región de Coquimbo' | nhs_region=='06. Región de Valparaíso' | nhs_region=='07. Región Metropolitana de Santiago'  | nhs_region=="08. Región del Libertador Bernardo O'Higgins"|nhs_region=='09. Región del Maule' |
nhs_region=='10. Región del Ñuble'| nhs_region=='11. Región del Bío-Bío'| nhs_region=='12. Región de La Araucanía' | nhs_region=='13. Región de Los Ríos' | nhs_region=='14. Región de Los Lagos' | nhs_region=='15. Región de Aysén del General Ibañez del Campo' | nhs_region=='16. Región de Magallanes y Antártica Chilena'  )
first_date <-fechas[l1-42]
last_date<-fechas[l1]
pathways_recent <- nhs_pathways_covid19 %>%
filter(fecha >= first_date)%>%
filter(fecha <= last_date)
lookup <- select(pathways_recent, fecha, day, weekday) %>%  distinct()
nhs_pathways_covid19$fecha<-as.Date(nhs_pathways_covid19$fecha)
dat <-
pathways_recent %>%
incidence(date_index = fecha, groups = nhs_region, count = Incidencia) %>%
left_join(lookup, by = c("date_index" = "fecha"))
models <- list(
regression = lm_model(Incidencia ~ day),
poisson_constant = glm_model(Incidencia ~ 1, family = "poisson"),
negbin_time = glm_nb_model(Incidencia ~ day),
negbin_time_weekday = glm_nb_model(Incidencia ~ day + weekday)
)
res <- asmodee(dat, models, method = evaluate_aic, alpha=0.05, k = 7)
p<-plot(res)
#p <- p +geom_hline(yintercept=10,color="red")
plot(p)
res
plot(res)
#Positividad
dat <-
pathways_recent %>%
incidence(date_index = fecha, groups = nhs_region, count = Positividad) %>%
left_join(lookup, by = c("date_index" = "fecha"))
models <- list(
regression = lm_model(Positividad ~ day),
poisson_constant = glm_model(Positividad ~ 1, family = "poisson"),
negbin_time = glm_nb_model(Positividad ~ day),
negbin_time_weekday = glm_nb_model(Positividad ~ day + weekday)
)
res <- asmodee(dat, models, method = evaluate_aic, alpha=0.05, k = 7)
plot(res)
#UCI
dat <-
pathways_recent %>%
incidence(date_index = fecha, groups = nhs_region, count = UCI) %>%
left_join(lookup, by = c("date_index" = "fecha"))
models <- list(
regression = lm_model( UCI ~ day),
poisson_constant = glm_model( UCI ~ 1, family = "poisson"),
negbin_time = glm_nb_model( UCI ~ day),
negbin_time_weekday = glm_nb_model( UCI ~ day + weekday)
)
res <- asmodee(dat, models, method = evaluate_aic, alpha=0.05, k = 7)
plot(res)
#Mortalidad
dat <-
pathways_recent %>%
incidence(date_index = fecha, groups = nhs_region, count = Mortalidad) %>%
left_join(lookup, by = c("date_index" = "fecha"))
models <- list(
regression = lm_model(Mortalidad ~ day),
poisson_constant = glm_model(Mortalidad ~ 1, family = "poisson"),
negbin_time = glm_nb_model(Mortalidad ~ day),
negbin_time_weekday = glm_nb_model(Mortalidad ~ day + weekday)
)
res <- asmodee(dat, models, method = evaluate_aic, alpha=0.05, k = 7)
plot(res)
