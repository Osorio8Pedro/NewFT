if (compute_ccgs) {
t9 <- Sys.time()
date_range_selected <- seq(as.Date('2020-06-01'), as.Date('2020-08-10'), by='day')
alpha_nhs <- 0.05
asmodee_conf_vec <- c('manual_7') # , 'manual_12', 'opt')
# define candidate models
models <- list(
# regression = lm_model(count ~ day),
poisson_constant = glm_model(count ~ 1, family = "poisson"),
poisson_time = glm_model(count ~ day, family = "poisson"),
negbin_time = glm_nb_model(count ~ day),
negbin_time_weekday = glm_nb_model(count ~ day + weekday),
negbin_time_weekday2 = glm_nb_model(count ~ day * weekday)
)
if (download_nhs_pathways) {
# download data
pathways <- tempfile()
download.file(
"https://github.com/qleclerc/nhs_pathways_report/raw/master/data/rds/pathways_latest.rds",
pathways)
pathways <- readRDS(pathways)
pathways <- as_tibble(pathways) %>%
mutate(ccg_name = sub("_ccg$", "", ccg_name))
counts_ccg_calls <- pathways %>%
filter(site_type %in% c("111", "999")) %>%
group_by(ccg_name, date, day, weekday) %>%
summarise(count = sum(count)) %>%
complete(date, fill = list(count = 0)) %>%
split(.$ccg_name)
saveRDS(counts_ccg_calls, here(data_relative_path, 'counts_ccg_calls.rds'))
} else {
counts_ccg_calls <- readRDS(here(data_relative_path, 'counts_ccg_calls.rds'))
}
# Remove the CCG "null" from the list
counts_ccg_calls[['null']] <- NULL
asmodee_selected_plot <- list()
res_ccg_calls_list <- list()
ccg_rank_date_all <- NULL
# Try three configurations for ASMODEE:
# - manual_7: with fixed k=7, method `evaluate_aic`, a period of observation of 7 days and
alpha=0.05
# - manual_12: with fixed k=12, method `evaluate_aic`, a period of observation of 12 days and
#   alpha=0.05
# - optimal: with optimal k, the same method as in the simulations, a period of observation of
#   `overall_params$d_observation_period`, as in the simulations and alpha taking the value
#   that maximizes the probability of detection in the "relapse" simulation scenario above
for (asmodee_conf in asmodee_conf_vec) {
res_ccg_calls_list[[asmodee_conf]] <- list()
asmodee_selected_plot[[asmodee_conf]] <- list()
ccg_rank_date <- NULL
for (i in 1:length(date_range_selected)) {
last_date <- date_range_selected[i]
first_date <- last_date - overall_params$n_sim_steps + 1
# Keep only CCG's with enough dates to apply ASMODEE.
ccg_enough_dates <- which(sapply(
counts_ccg_calls,
function (cccalls)
min(cccalls$date) <= first_date & max(cccalls$date) >= last_date
))
counts_ccg_calls_enough_dates <- counts_ccg_calls[ccg_enough_dates]
## analyses by CCG
## note: for all 210 CCG's this takes about 1 minute to run with AIC model selection
##   (method=evaluate_aic), around 16-17 min with cross validation
##   (method=evaluate_resampling, the default)
if (asmodee_conf=='manual_7') {
obs_period <- 7
res_ccg_calls <- lapply(counts_ccg_calls_enough_dates,
function (cccalls)
asmodee(
data = cccalls %>% filter(date >= first_date & date <= last_date),
models = models,
method = asmodee_params$method,
fixed_k = 7,
alpha = alpha_nhs,
uncertain = FALSE,
simulate_pi = TRUE
)
)
} else if (asmodee_conf=='manual_12') {
obs_period <- 12
res_ccg_calls <- lapply(counts_ccg_calls_enough_dates,
function (cccalls)
asmodee(
data = cccalls %>% filter(date >= first_date & date <= last_date),
models = models,
method = asmodee_params$method,
fixed_k = 12,
alpha = alpha_nhs,
uncertain = FALSE,
simulate_pi = TRUE
)
)
} else if (asmodee_conf=='opt') {
obs_period <- overall_params$d_observation_period
res_ccg_calls <- lapply(counts_ccg_calls_enough_dates,
function (cccalls)
asmodee(
data = cccalls %>% filter(date >= first_date & date <= last_date),
models = models,
max_k = asmodee_params$k_optimal_max,
method = asmodee_params$method,
alpha = alpha_nhs,
uncertain = FALSE,
simulate_pi = TRUE
)
)
}
res_ccg_calls_list[[asmodee_conf]][[i]] <- res_ccg_calls
# Compute CCG ranks with respect to the number of "increase" outliers
ccg_rank <- lapply(res_ccg_calls, function(e)
tibble(
ccg_name = unique(e$results$ccg_name),
date = last_date,
n_increase = e$results %>%
filter(date >= last_date -obs_period + 1 & classification == 'increase') %>%
nrow()
)
) %>%
bind_rows() %>%
mutate(rank = frankv(n_increase, ties.method='min', order=-1)) %>%
arrange(rank)
ccg_rank_date <- bind_rows(ccg_rank_date, ccg_rank)
}
for (sc in selected_ccgs) {
asmodee_selected_plot[[asmodee_conf]][[sc]] <- list()
for (i in 1:length(date_range_selected)) {
last_date <- date_range_selected[i]
asmodee_selected_plot[[asmodee_conf]][[sc]][[i]] <- plot(
res_ccg_calls_list[[asmodee_conf]][[i]][[sc]],
'date', point_size=1, guide=F) +
ggtitle(format(last_date, '%d %b %Y')) +
theme(text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_date(date_labels = format("%d %b")) +
geom_vline(xintercept = last_date - obs_period + 1 - 0.6, size=0.75, color='grey80')
}
}
ccg_rank_date <- ccg_rank_date %>%
complete(ccg_name, date, fill=list(n_increase=NA, rank=NA)) %>%
arrange(ccg_name, date)
ccg_rank_date_all <- bind_rows(
ccg_rank_date_all,
ccg_rank_date %>% mutate(asmodee_conf=asmodee_conf)
)
}
saveRDS(res_ccg_calls_list, here(data_relative_path, 'res_ccg_calls_list.rds'))
saveRDS(asmodee_selected_plot, here(data_relative_path, 'asmodee_selected_plot.rds'))
saveRDS(ccg_rank_date_all, here(data_relative_path, 'ccg_rank_date_all.rds'))
t10 <- Sys.time()
print('Time elapsed for Leicester:')
print(t10-t9)
} else {
res_ccg_calls_list <- readRDS(here(data_relative_path, 'res_ccg_calls_list.rds'))
asmodee_selected_plot <- readRDS(here(data_relative_path, 'asmodee_selected_plot.rds'))
ccg_rank_date_all <- readRDS(here(data_relative_path, 'ccg_rank_date_all.rds'))
}
if (plot_ccgs) {
for (asmodee_conf in unique(ccg_rank_date_all$asmodee_conf)) {
ccg_rank_date <- ccg_rank_date_all %>% filter(asmodee_conf==asmodee_conf)
for (sc in selected_ccgs) {
ccg_name <- CleanCCGName(sc)
asmodee_selected_plot_combined <- arrangeGrob(
grobs=asmodee_selected_plot[[asmodee_conf]][[sc]],
as.table=T,
ncol=min(length(asmodee_selected_plot[[asmodee_conf]][[sc]]), 7),
top=textGrob(ccg_name, gp=gpar(fontsize=30))
)
ggsave(asmodee_selected_plot_combined,
filename=here(ccgs_relative_path,
paste0('asmodee_selected_', sc, '_', asmodee_conf, '.pdf')),
width=8*min(length(asmodee_selected_plot[[asmodee_conf]][[sc]]), 7),
height=6*(1+floor(length(asmodee_selected_plot[[asmodee_conf]][[sc]])/7)), unit='cm')
ggsave(asmodee_selected_plot_combined,
filename=here(ccgs_relative_path,
paste0('asmodee_selected_', sc, '_', asmodee_conf, '.png')),
width=8*min(length(asmodee_selected_plot[[asmodee_conf]][[sc]]), 7),
height=6*(1+floor(length(asmodee_selected_plot[[asmodee_conf]][[sc]])/7)), unit='cm',
dpi=150)
}
ccgs_colors <- c(
vega_standard_palette[1:length(selected_ccgs)],
rep('grey70', length(unique(ccg_rank_date$ccg_name))-length(selected_ccgs))
)
names(ccgs_colors) <- c(
selected_ccgs,
unique(ccg_rank_date$ccg_name)[! unique(ccg_rank_date$ccg_name) %in% selected_ccgs]
)
ccgs_compare_title <- paste0(
'How ',
paste(sapply(selected_ccgs[-length(selected_ccgs)], function (sc)
paste0('<b style="color:', ccgs_colors[[sc]], '">', CleanCCGName(sc), '</b>')),
collapse=', '),
ifelse(length(selected_ccgs)==1, '', ' and '),
paste0('<b style="color:', ccgs_colors[[tail(selected_ccgs,1)]], '">',
CleanCCGName(tail(selected_ccgs,1)), '</b>'),
ifelse(length(selected_ccgs)==1, ' compares', ' compare'),
' to other CCG\'s.'
)
ccg_selected_nincrease_plot <- ggplot(
ccg_rank_date %>% filter(!ccg_name %in% selected_ccgs),
aes(date, n_increase, fill=ccg_name, color=ccg_name)) +
geom_line(alpha=0.3,
position = position_jitter(width=0.05, height=0.1, seed = 1)) +
geom_point(color='black', shape=21, alpha=0.3,
position = position_jitter(width=0.07, height=0.1, seed = 1)) +
geom_line(data=ccg_rank_date %>% filter(ccg_name %in% selected_ccgs),
color='black', size=1.4,
position = position_jitter(width=0.07, height=0.1, seed = 2))
for (ccg in names(lockdown_start)) {
ccg_selected_nincrease_plot <- ccg_selected_nincrease_plot +
geom_vline(xintercept=lockdown_start[[ccg]]-0.5, color=ccgs_colors[[ccg]], size=1, alpha=0.75)
}
ccg_selected_nincrease_plot <- ccg_selected_nincrease_plot +
geom_line(data=ccg_rank_date %>% filter(ccg_name %in% selected_ccgs), size=0.9,
position = position_jitter(width=0.07, height=0.1, seed = 2)) +
geom_point(data=ccg_rank_date %>% filter(ccg_name %in% selected_ccgs),
color='black', shape=21, size=2,
position = position_jitter(width=0.07, height=0.1, seed = 2)) +
scale_color_manual(values=ccgs_colors) +
scale_fill_manual(values=ccgs_colors) +
scale_y_continuous(breaks=0:max(ccg_rank_date$n_increase)) +
ggtitle(ccgs_compare_title) +
ylab('number of *increase* days') +
theme_bw() +
theme(
text = element_text(size = 12),
plot.title = element_markdown(),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_markdown(),
legend.position = 'none',
panel.grid.minor.y = element_blank()) +
scale_x_date(date_labels = format("%d %b"))
ggsave(ccg_selected_nincrease_plot,
filename=here(ccgs_relative_path, paste0('ccg_selected_nincrease_plot_', asmodee_conf, '.pdf')),
width=20, height=12, unit='cm')
ggsave(ccg_selected_nincrease_plot,
filename=here(ccgs_relative_path, paste0('ccg_selected_nincrease_plot_', asmodee_conf, '.png')),
width=20, height=12, unit='cm', dpi=150)
ccg_selected_rank_plot <- ggplot(
ccg_rank_date %>% filter(! ccg_name %in% selected_ccgs),
aes(date, rank, fill=ccg_name, color=ccg_name)) +
geom_line(alpha=0.3,
position = position_jitter(width=0.1, height=1.5, seed = 1)) +
geom_point(color='black', shape=21, alpha=0.3,
position = position_jitter(width=0.1, height=1.5, seed = 1)) +
geom_line(data=ccg_rank_date %>% filter(ccg_name %in% selected_ccgs),
color='black', size=1.4,
position = position_jitter(width=0.1, height=1.5, seed = 2))
for (ccg in names(lockdown_start)) {
ccg_selected_nincrease_plot <- ccg_selected_nincrease_plot +
geom_vline(xintercept=lockdown_start[[ccg]]-0.5, color=ccgs_colors[[ccg]])
}
ccg_selected_rank_plot <- ccg_selected_rank_plot +
geom_line(data=ccg_rank_date %>% filter(ccg_name %in% selected_ccgs), size=0.9,
position = position_jitter(width=0.1, height=1.5, seed = 2)) +
geom_point(data=ccg_rank_date %>% filter(ccg_name %in% selected_ccgs),
color='black', shape=21, size=2,
position = position_jitter(width=0.1, height=1.5, seed = 2)) +
scale_color_manual(values=ccgs_colors) +
scale_fill_manual(values=ccgs_colors) +
scale_y_reverse(breaks = c(1, 30, 60, 90, 120)) +
theme_bw() +
theme(text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = 'none',
panel.grid.minor.y = element_blank()) +
scale_x_date(date_labels = format("%d %b"))
ccg_selected_plot_combined <- arrangeGrob(
grobs=list(ccg_selected_nincrease_plot + xlab(NULL), ccg_selected_rank_plot),
as.table=T,
ncol=1
)
ggsave(ccg_selected_plot_combined,
filename=here(ccgs_relative_path, paste0('ccg_selected_plot_combined_', asmodee_conf, '.pdf')),
width=25, height=20, unit='cm')
ggsave(ccg_selected_plot_combined,
filename=here(ccgs_relative_path, paste0('ccg_selected_plot_combined_', asmodee_conf, '.png')),
width=25, height=20, unit='cm', dpi=150)
ccg_selected_nincrease_heatmap <- ggplot(ccg_rank_date,
aes(date, CleanCCGName(ccg_name), fill=n_increase)) +
geom_tile() +
scale_fill_gradient(low=vega_standard_palette[1], high=vega_standard_palette[2]) +
labs(y='CCG', fill='number of\nincrease days') +
theme_bw() +
theme(panel.grid = element_blank())
ggsave(ccg_selected_nincrease_heatmap,
filename=here(ccgs_relative_path,
paste0('ccg_selected_nincrease_heatmap_', asmodee_conf, '.pdf')),
width=25, height=50, unit='cm')
ggsave(ccg_selected_nincrease_heatmap,
filename=here(ccgs_relative_path,
paste0('ccg_selected_nincrease_heatmap_', asmodee_conf, '.png')),
width=25, height=50, unit='cm', dpi=150)
ccg_selected_rank_heatmap <- ggplot(ccg_rank_date,
aes(date, CleanCCGName(ccg_name), fill=rank)) +
geom_tile() +
scale_fill_gradient(high=vega_standard_palette[1], low=vega_standard_palette[2]) +
labs(y='CCG', fill='rank') +
theme_bw() +
theme(panel.grid = element_blank())
ggsave(ccg_selected_rank_heatmap,
filename=here(ccgs_relative_path,
paste0('ccg_selected_rank_heatmap_', asmodee_conf, '.pdf')),
width=25, height=50, unit='cm')
ggsave(ccg_selected_rank_heatmap,
filename=here(ccgs_relative_path,
paste0('ccg_selected_rank_heatmap_', asmodee_conf, '.png')),
width=25, height=50, unit='cm', dpi=150)
}
}
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
df=data.frame(a,b,c,d)
####################
a<-ftregion$id_region
p<-ftregion$cant_poblacion
b<-ftregion$cant_casosconfirmadosdiario
c<-ftregion$cant_uci
d<-ftregion$cant_fallecidos
df=data.frame(a,b,c,d)
View(df)
b=round(b/p*100000)
####################
a<-ftregion$id_region
e<-ftregion$fch_confirmado
p<-ftregion$cant_poblacion
b<-ftregion$cant_casosconfirmadosdiario
b=round(b/p*100000)
c<-ftregion$cant_uci
c=round(c/p*100000)
d<-ftregion$cant_fallecidos
d=round(d/p*100000)
df=data.frame(a,e,b,c,d)
View(df)
df=data.frame(a,e,b,c,d)
plot(e, b, type = "l", col ="tomato", lwd=2, ylim = c(-5,5))
lines(e, c, col = "lightblue", lwd = 2, lty= "dashed")
plot(df$e, df$b, type = "l", col ="tomato", lwd=2, ylim = c(-5,5))
lines(df$e, df$c, col = "lightblue", lwd = 2, lty= "dashed")
ftis3=ftregion[which(ftregion$id_region==2),]
ftis3
length(ftis3)
t1=aggregate(cant_casosconfirmados~id_semanaepidemiologica,ftis3,sum)
View(ftis3)
ftis3=ftregion[which(ftregion$id_region==2),]
ftis3
t1=aggregate(cant_casosconfirmados~txt_semanaepidemiologica,ftis3,sum)
t1
t2=aggregate(cant_uci~txt_semanaepidemiologica,ftis3,sum)
plot(t1[,1],t1[,2],type="l")
lines(t2[,1],t2[,2],col="red")
b<-ftregion$cant_casosconfirmadosdiario
b<-ftregion$cant_casosconfirmadosdiario
b=round(b/p*100000)
c<-ftregion$cant_uci
c=round(c/p*100000)
t1=aggregate(b~txt_semanaepidemiologica,ftis3,sum)
x<-ftregion$txt_semanaepidemiologica
t1=aggregate(b~x,ftis3,sum)
t2=aggregate(c~x,ftis3,sum)
plot(t1[,1],t1[,2],type="l")
lines(t2[,1],t2[,2],col="red")
View(ftregion)
ftis3=ftregion[which(ftregion$id_region==0),]
####################
a<-ftregion$id_region
e<-ftregion$fch_confirmado
p<-ftregion$cant_poblacion
b<-ftregion$cant_casosconfirmadosdiario
b=round(b/p*100000)
c<-ftregion$cant_uci
c=round(c/p*100000)
d<-ftregion$cant_fallecidos
d=round(d/p*100000)
x<-ftregion$txt_semanaepidemiologica
t1=aggregate(b~x,ftis3,sum)
t2=aggregate(c~x,ftis3,sum)
plot(t1[,1],t1[,2],type="l")
lines(t2[,1],t2[,2],col="red")
View(t1)
View(df)
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftis3=ftregion[which(ftregion$id_region==0),]
a<-ftregion$id_region
e<-ftregion$fch_confirmado
p<-ftregion$cant_poblacion
b<-ftregion$cant_casosconfirmadosdiario
b=round(b/p*100000)
c<-ftregion$cant_uci
c=round(c/p*100000)
d<-ftregion$cant_fallecidos
d=round(d/p*100000)
x<-ftregion$txt_semanaepidemiologica
df=data.frame(a,e,b,c,d,x)
t1=aggregate(b~x,ftis3,sum)
t2=aggregate(c~x,ftis3,sum)
plot(t1[,1],t1[,2],type="l")
lines(t2[,1],t2[,2],col="red")
View(t1)
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftis3=ftregion[which(ftregion$id_region==0),]
View(ftis3)
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftis3=ftregion[which(ftregion$id_region==0),]
a<-ftis3$id_region
e<-ftis3$fch_confirmado
p<-ftis3$cant_poblacion
b<-ftis3$cant_casosconfirmadosdiario
b=round(b/p*100000)
c<-ftis3$cant_uci
c=round(c/p*100000)
d<-ftis3$cant_fallecidos
d=round(d/p*100000)
x<-ftis3$txt_semanaepidemiologica
df=data.frame(a,e,b,c,d,x)
t1=aggregate(b~x,ftis3,sum)
t2=aggregate(c~x,ftis3,sum)
plot(t1[,1],t1[,2],type="l")
lines(t2[,1],t2[,2],col="red")
t2=aggregate(d~x,ftis3,sum)
t2=aggregate(c~x,ftis3,sum)
t3=aggregate(d~x,ftis3,sum)
plot(t1[,1],t1[,2],type="l")
lines(t2[,1],t2[,2],col="red")
lines(t3[,1],t3[,2],col="red")
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftis3=ftregion[which(ftregion$id_region==0),]
a<-ftis3$id_region
e<-ftis3$fch_confirmado
p<-ftis3$cant_poblacion
b<-ftis3$cant_casosconfirmadosdiario
b=round(b/p*100000)
c<-ftis3$cant_uci
c=round(c/p*100000)
d<-ftis3$cant_fallecidos
d=round(d/p*100000)
x<-ftis3$txt_semanaepidemiologica
df=data.frame(a,e,b,c,d,x)
View(df)
t1=aggregate(b~x,ftis3,sum)
t2=aggregate(c~x,ftis3,sum)
t3=aggregate(d~x,ftis3,sum)
plot(t1[,1],t1[,2],type="l")
lines(t2[,1],t2[,2],col="red")
lines(t3[,1],t3[,2],col="red")
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftis3=ftregion[which(ftregion$id_region==0),]
a<-ftis3$id_region
e<-ftis3$fch_confirmado
p<-ftis3$cant_poblacion
b<-ftis3$cant_casosconfirmadosdiario
b=round(b/p*100000)
c<-ftis3$cant_uci
c=round(c/p*100000)
d<-ftis3$cant_fallecidos
d=round(d/p*100000)
x<-ftis3$txt_semanaepidemiologica
df=data.frame(a,e,b,c,d,x)
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftis3=ftregion[which(ftregion$id_region==0),]
a<-ftis3$id_region
e<-ftis3$fch_confirmado
p<-ftis3$cant_poblacion
b<-ftis3$cant_casosconfirmadosdiario
b=round(b/p*100000)
c<-ftis3$cant_uci
c=round(c/p*100000)
d<-ftis3$cant_fallecidos
d=round(d/p*100000)
x<-ftis3$txt_semanaepidemiologica
df=data.frame(a,e,b,c,d,x)
ftis3
length(ftis3)
t1=aggregate(b~x,ftis3,sum)
t2=aggregate(c~x,ftis3,sum)
t3=aggregate(d~x,ftis3,sum)
plot(t1[,1],t1[,2],type="l")
lines(t2[,1],t2[,2],col="red")
lines(t3[,1],t3[,2],col="red")
plot(t3[,1],t3[,2],type="l")
lines(t2[,1],t2[,2],col="red")
lines(t3[,1],t3[,2],col="red")
lines(t1[,1],t1[,2],col="red")
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
View(ftregion)
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
plot(df$e, df$b, type = "l", col ="tomato", lwd=2, ylim = c(-5,5))
ftregion<-read.csv("newftregion.txt",sep=";",header=T)
ftis3=ftregion[which(ftregion$id_region==0),]
a<-ftis3$id_region
e<-ftis3$fch_confirmado
p<-ftis3$cant_poblacion
b<-ftis3$cant_casosconfirmadosdiario
c<-ftis3$cant_uci
d<-ftis3$cant_falle
x<-ftis3$txt_semanaepidemiologica
df=data.frame(a,e,b,c,d,x)
plot(t3[,1],t3[,2],type="l")
plot(t1[,1],t1[,2],type="l")
plot(df[,3],df[,2],type="l")
View(df)
View(df)
plot(df[,3],as.Date(df[,2]),type="l")
plot(as.Date(df[,2]),df[,3],type="l")
lines(as.Date(df[,2]),df[,4],col="red")
lines(as.Date(df[,2]),df[,5],col="purple")
qplot(as.Date(df[,2]),df[,3],type="l")
qqplot(as.Date(df[,2]),df[,3],type="l")
qqplot(as.Date(df[,2]),df[,3],type="l")
lines(as.Date(df[,2]),df[,4],col="red")
qqplot(as.Date(df[,2]),df[,3],type="l")
lines(as.Date(df[,2]),df[,4],col="red")
lines(as.Date(df[,2]),df[,5],col="purple")
